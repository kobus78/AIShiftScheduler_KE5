# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_trainer.ipynb.

# %% auto 0
__all__ = ['do_train']

# %% ../nbs/07_trainer.ipynb 4
# from collections import namedtuple, defaultdict
import numpy as np
import pandas as pd
# import matplotlib as mpl
# import matplotlib.pyplot as plt
from copy import copy
# import time
# import math
# from pprint import pprint
## !pip install -U "ray"
# import ray
# import json

import AIShiftScheduler_KE5.config as cf
from .model import *
from .policy import *

# %% ../nbs/07_trainer.ipynb 8
pd.options.display.float_format = '{:,.4f}'.format
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.max_colwidth', None)

# %% ../nbs/07_trainer.ipynb 11
def do_train(L, T, Thetas):
# def do_train(L, T):    
  # global DEM, MER, \
  # global Df_first_n_t, Df_last_n_t, \
  # global ThetasCumSlots, \
  # ThetasSickProb, ThetasCumMerits, \
  # ThetasContSlots, ThetasSelect, \
  # Thetas # Thetas #for parallelization
  # ThetaStar_expCbarcum_Alloc, ThetaStar_expCtilcum_Alloc, \
  # Cbarcum_Alloc, Ctilcum_Alloc, Best_theta_Alloc, Worst_theta_Alloc, \
  # Best_Cbarcum_Alloc, Worst_Cbarcum_Alloc, \
  # Best_Ctilcum_Alloc, Worst_Ctilcum_Alloc, \
  # Record_Alloc, First_n_t, Last_n_t, \

  M = Model()
  P = Policy(M)
  ## DEM = DemandSimulator(seed=SEED_TRAIN)
  ## MER = MeritSimulator(seed=SEED_TRAIN)

  # ThetaStar_expCbarcum_Alloc, ThetaStar_expCtilcum_Alloc, \
  # Cbarcum_Alloc, Ctilcum_Alloc, \
  # Best_theta_Alloc, Worst_theta_Alloc, \
  # Best_Cbarcum_Alloc, Worst_Cbarcum_Alloc, \
  # Best_Ctilcum_Alloc, Worst_Ctilcum_Alloc, \
  # Record_Alloc = \
  #   P.parallel_perform_grid_search_sample_paths('X__Alloc', Thetas, L, T)
  return \
    P.parallel_perform_grid_search_sample_paths('X__Alloc', Thetas, L, T)

  # f'{ThetaStar_expCbarcum_Alloc.iloc[-1]=:.2f}'
  # Df_first_n_t = pd.DataFrame.from_records(Record_Alloc[:First_n_t], columns=Labels)
  # Df_last_n_t = pd.DataFrame.from_records(Record_Alloc[-Last_n_t:], columns=Labels)  
