[
  {
    "objectID": "evaluator.html",
    "href": "evaluator.html",
    "title": "evaluator",
    "section": "",
    "text": "# Set up autoreload\n\n\npd.__version__\n\n'2.0.3'\n\n\n\n# !pip freeze | grep pandas\n# !pip freeze|grep openpyxl\n# !pip freeze\n\n\n# !pip install -U ray==2.8.1\n# !pip install openpyxl\n\n\n# #| export\n# base_dir = '.'\n# file_name = 'shift_scheduler_data.xlsx'\n\n\nsource\n\ndo_evalu_opt\n\n do_evalu_opt (L, T, Best_theta_Alloc)\n\n\nsource\n\n\ndo_evalu_non\n\n do_evalu_non (L, T, Worst_theta_Alloc)",
    "crumbs": [
      "evaluator"
    ]
  },
  {
    "objectID": "config.html",
    "href": "config.html",
    "title": "config",
    "section": "",
    "text": "# Set up autoreload\n\nThe autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\n# pd.__version__\n\n\n# !pip freeze | grep pandas\n# !pip freeze|grep openpyxl\n# !pip freeze\n\n\n# !pip install -U ray==2.8.1\n# !pip install openpyxl\n\n\n# #| export\n# pd.options.display.float_format = '{:,.4f}'.format\n# pd.set_option('display.max_columns', None)\n# pd.set_option('display.max_rows', None)\n# pd.set_option('display.max_colwidth', None)\n\n\n# #| export\n# BASE_DIR = '.'\n# # BASE_DIR = '..'\n# FILE_NAME = 'shift_scheduler_data.xlsx'\n\n\n## SNAMES = [ #state variable names\n#     'RAvail_t', #available resource\n#     'R_t',      #resource\n#     'D_t',      #demand\n# ]\n## xNAMES = ['x_t'] #decision variable names\n\n\nsource\n\nslots_per_day_and_date_time_delta\n\n slots_per_day_and_date_time_delta (resolution)\n\n\n## ///////////////////////////\n# SLOTS_PER_DAY = {\n#     'QUARTER_HOUR': 96,\n#     'HOUR': 24,\n#     'BLOCK_8_HOUR': 3\n#     # 'BLOCK_8_HOUR': {0: '6H', 1: '10H', 2: '8H'}\n# }\n# DATE_TIME_DELTA = {\n#     'QUARTER_HOUR': '15min',\n#     'HOUR': '1H',\n#     'BLOCK_8_HOUR': '8H'\n#     # 'BLOCK_8_HOUR': {0: '6H', 1: '10H', 2: '8H'}\n# }\n## \\\\\\\\\\\\\\\\\\\\\n\n\nsource\n\n\nget_availabilities\n\n get_availabilities (dt)\n\n\nsource\n\n\nget_dow_qod_capacities\n\n get_dow_qod_capacities (dow)\n\n\nsource\n\n\nget_dow_hod_capacities\n\n get_dow_hod_capacities (dow)\n\n\nsource\n\n\nget_dow_bod_capacities\n\n get_dow_bod_capacities (dow)\n\n\nsource\n\n\nget_capacities\n\n get_capacities (dow)\n\n\n## math parameters use 'math/small case' (as opposed to code parameters):\n\n\n## CONTRIB_MATRIX = {}\n# for an in aNAMES:\n#     contribs = {}\n#     for bn in bNAMES:\n#       contribs[bn] = contribution(an, bn)\n#     CONTRIB_MATRIX[an] = contribs\n# CONTRIB_MATRIX",
    "crumbs": [
      "config"
    ]
  },
  {
    "objectID": "inferencer.html",
    "href": "inferencer.html",
    "title": "inferencer",
    "section": "",
    "text": "# Set up autoreload\n\n\n# pd.__version__\n\n\n# !pip freeze | grep pandas\n# !pip freeze|grep openpyxl\n# !pip freeze\n\n\n# !pip install -U ray==2.8.1\n# !pip install openpyxl\n\n\n# #| export\n# pd.options.display.float_format = '{:,.4f}'.format\n# pd.set_option('display.max_columns', None)\n# pd.set_option('display.max_rows', None)\n# pd.set_option('display.max_colwidth', None)\n\n\n# #| export\n# base_dir = '.'\n# file_name = 'shift_scheduler_data.xlsx'\n\n\nsource\n\nget_best_theta_Alloc\n\n get_best_theta_Alloc ()\n\n\nsource\n\n\ndo_infer\n\n do_infer (L, T, best_theta_Alloc)\n\n\nsource\n\n\nprepare_schedule_shifts\n\n prepare_schedule_shifts (df, buf)\n\n\nsource\n\n\nprepare_schedule_slots\n\n prepare_schedule_slots (df, buf)",
    "crumbs": [
      "inferencer"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "# Set up autoreload\n!which python\n\n/Users/kobus/AIShiftScheduler_KE5/.venv/bin/python\n!python --version\n\nPython 3.10.0\nnp.__version__, pd.__version__, mpl.__version__, ray.__version__, json.__version__\n\n('1.24.4', '2.0.3', '3.7.4', '2.8.1', '2.0.9')\n# !pip freeze | grep pandas\n# !pip freeze|grep openpyxl\n# !pip freeze\n# !pip install -U ray==2.8.1\n# !pip install openpyxl\n# check some config\ncf.SICK_PROBS.head()\n\n\n\n\n\n\n\n\n\nResourceId\nJanuary\nFebruary\nMarch\nApril\nMay\nJune\nJuly\nAugust\nSeptember\nOctober\nNovember\nDecember\n\n\n\n\n0\n1\n0.0300\n0.0300\n0.0100\n0.0200\n0.0200\n0.0900\n0.0200\n0.0100\n0.0100\n0.0000\n0.0000\n0.0300\n\n\n1\n2\n0.1000\n0.0300\n0.1000\n0.0800\n0.0100\n0.0600\n0.0600\n0.0900\n0.0700\n0.0300\n0.0200\n0.1000\n\n\n2\n3\n0.1300\n0.0100\n0.0300\n0.0300\n0.0300\n0.0200\n0.0200\n0.0900\n0.0000\n0.0200\n0.0300\n0.0500\n\n\n3\n4\n0.0900\n0.0800\n0.0100\n0.0200\n0.0700\n0.0800\n0.0300\n0.0400\n0.0700\n0.0200\n0.0300\n0.0900\n\n\n4\n5\n0.0200\n0.0200\n0.0900\n0.0900\n0.0900\n0.0400\n0.0300\n0.0500\n0.0200\n0.1000\n0.1100\n0.0700\ncf.MERIT_PROBS.head()\n\n\n\n\n\n\n\n\n\nResourceId\nMeritProb\nDemeritProb\n\n\n\n\n0\n1\n0.0100\n0.0400\n\n\n1\n2\n0.2000\n0.0900\n\n\n2\n3\n0.3000\n0.0300\n\n\n3\n4\n0.2000\n0.1500\n\n\n4\n5\n0.0500\n0.0200\ncf.EXOG_INFO.head()\n\n\n\n\n\n\n\n\n\nDate\nDOW\nDOW_name\nQOD\nHOD\nBOD\nA_0\nA_1\nA_2\nA_3\nA_4\nA_5\nA_6\nA_7\nA_8\nA_9\nA_10\nA_11\nA_12\nD_0\nD_1\nD_2\nM_0\nM_1\nM_2\nM_3\nM_4\nM_5\nM_6\nM_7\nM_8\nM_9\nM_10\nM_11\nM_12\nbusyness\nvolume\nrevenue\n\n\n\n\n0\n2023-12-04 00:00:00\n0\n2023-12-04 00:00:00\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n\n\n1\n2023-12-04 00:15:00\n0\n2023-12-04 00:15:00\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n1\n0\n0\n-1\n1\n0\n0\n0\nNaN\nNaN\n\n\n2\n2023-12-04 00:30:00\n0\n2023-12-04 00:30:00\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n-1\n0\n0\n0\n1\n-1\n0\n0\n-1\n-1\n0\nNaN\nNaN\n\n\n3\n2023-12-04 00:45:00\n0\n2023-12-04 00:45:00\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n-1\n0\n0\n0\n0\n-1\n0\n0\n-1\n-1\n0\nNaN\nNaN\n\n\n4\n2023-12-04 01:00:00\n0\n2023-12-04 01:00:00\n4\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n-1\n0\n0\n0\n0\n-1\n0\n0\n-1\n-1\n0\n0\n0.0000\ncf.MODES\n\n['TRAIN', 'EVALU']\ncf.MAX_RESOURCE_TYPES\n\n3\ncf.MAX_RESOURCE_IDS\n\n13\ncf.aNAMES\n\n['Manager_Matt',\n 'AssistMngr_Mike',\n 'AssistMngr_Tanner',\n 'RetailAssoc_Jake',\n 'RetailAssoc_James',\n 'RetailAssoc_Jane',\n 'RetailAssoc_John',\n 'RetailAssoc_Jim',\n 'RetailAssoc_Jenny',\n 'RetailAssoc_Jeremy',\n 'RetailAssoc_Judy',\n 'RetailAssoc_Julie',\n 'RetailAssoc_Jeffrey']\ncf.bNAMES\n\n['Manager', 'AssistMngr', 'RetailAssoc']\ncf.abNAMES\n\n['Manager_Matt___Manager',\n 'AssistMngr_Mike___AssistMngr',\n 'AssistMngr_Tanner___AssistMngr',\n 'RetailAssoc_Jake___RetailAssoc',\n 'RetailAssoc_James___RetailAssoc',\n 'RetailAssoc_Jane___RetailAssoc',\n 'RetailAssoc_John___RetailAssoc',\n 'RetailAssoc_Jim___RetailAssoc',\n 'RetailAssoc_Jenny___RetailAssoc',\n 'RetailAssoc_Jeremy___RetailAssoc',\n 'RetailAssoc_Judy___RetailAssoc',\n 'RetailAssoc_Julie___RetailAssoc',\n 'RetailAssoc_Jeffrey___RetailAssoc']",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "core.html#evaluation-1",
    "href": "core.html#evaluation-1",
    "title": "core",
    "section": "5 EVALUATION",
    "text": "5 EVALUATION\n\ndef print_schedule_shifts(df):\n  mask = df.columns.str.contains('Allocd_t')\n  resource_allocs = list(df.columns[mask])\n  sched = copy(df)\n  schedule = sched[['dt']+resource_allocs]\n\n  print(f\"SCHEDULE SHIFTS:\")\n  print(f\"===============\")\n  for res_alloc in resource_allocs:\n    _,_,id,resType,_,_,_ = res_alloc.split('_')\n    resName = id+'_'+resType\n    print(f'\\n************** {resName}:')\n    sched_list = list(schedule.loc[\n      schedule[res_alloc] == True,\n      ['dt', res_alloc]\n    ]['dt'])\n    if len(sched_list) &gt; 0:\n      ts_1 = sched_list[0]\n      dow_1 = sched_list[0].day_of_week\n      print(f\"{(sched_list[0]-pd.Timedelta(cf.DATE_TIME_DELTA)).strftime('%a %b %d %Hh%M')}\")\n      for ts in sched_list:\n        dow = ts.day_of_week\n        if dow != dow_1:\n          print(f\"{(ts_1).strftime('%a %b %d %Hh%M')}\\n\")\n          print(f\"{(ts-pd.Timedelta(cf.DATE_TIME_DELTA)).strftime('%a %b %d %Hh%M')}\")\n        dow_1 = dow\n        ts_1 = ts\n      print(f\"{(sched_list[-1]).strftime('%a %b %d %Hh%M')}\")\n  print(f'\\n{cf.CONTIGUOUS_REWARD=}')\n  print(f'{cf.MAX_DAILY_SLOT_RUN=} ({cf.RESOLUTION}s)')\n  print(f'{cf.TH_CumSlots_SPEC=}')\n  print(f'{cf.TH_SickProb_SPEC=}')\n  print(f'{cf.TH_CumMerits_SPEC=}')\n  print(f'{cf.TH_ContSlots_SPEC=}')\n  print(f'{cf.TH_Select_SPEC=}')\n\n\n##\n# if 'EVALU' in cf.MODES:\n#   print_schedule_shifts(Df_Alloc_evalu_opt)\n\n\ndef gap_minutes(resolution):\n  if resolution == 'QUARTER_HOUR':\n    return 15\n  elif resolution == 'HOUR':\n    return 60\n  elif resolution == 'BLOCK_8_HOUR':\n    return 480\n  else:\n    print(f'ERROR: Invalid RESOLUTION: {cf.RESOLUTION}')\n\n\ndef print_schedule_slots(df):\n  gap_mins = gap_minutes(cf.RESOLUTION)\n  mask = df.columns.str.contains('Allocd_t')\n  resource_allocs = list(df.columns[mask])\n  sched = copy(df)\n  schedule = sched[['dt']+resource_allocs]\n\n  print(f\"SCHEDULE SLOTS:\")\n  print(f\"===============\")\n  n_gaps = 0\n  for res_alloc in resource_allocs:\n    _,_,id,resType,_,_,_ = res_alloc.split('_')\n    resName = id+'_'+resType\n    print(f'\\n************** {resName}:')\n    sched_list = list(schedule.loc[\n      schedule[res_alloc] == True,\n      ['dt', res_alloc]\n    ]['dt'])\n    if len(sched_list) &gt; 0:\n      ## print each slot and indicate gaps\n      ts_1 = sched_list[0]\n      dow_1 = -1\n      for ts in sched_list:\n        dow = ts.day_of_week\n        if dow != dow_1: print('')\n        if (int((ts.to_datetime64() - ts_1.to_datetime64())/(1e9*60)) &gt; gap_mins)\\\n          and (dow == dow_1):\n          n_gaps += 1\n          print(f\"{(ts-pd.Timedelta(cf.DATE_TIME_DELTA)).strftime('%a %b %d %Hh%M')} GAP\")\n        else:\n          print(f\"{(ts-pd.Timedelta(cf.DATE_TIME_DELTA)).strftime('%a %b %d %Hh%M')}\")\n        dow_1 = dow\n        ts_1 = ts\n  print(f'\\nTOTAL NUMBER OF GAPS FOR ALL RESOURCES: {n_gaps}')\n  print(f'{cf.CONTIGUOUS_REWARD=}')\n  print(f'{cf.MAX_DAILY_SLOT_RUN=} ({cf.RESOLUTION}s)')\n  print(f'{cf.TH_CumSlots_SPEC=}')\n  print(f'{cf.TH_SickProb_SPEC=}')\n  print(f'{cf.TH_CumMerits_SPEC=}')\n  print(f'{cf.TH_ContSlots_SPEC=}')\n  print(f'{cf.TH_Select_SPEC=}')\n\n\n##\n# if 'EVALU' in cf.MODES:\n#   print_schedule_slots(Df_Alloc_evalu_opt)",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "core.html#deployment-inference",
    "href": "core.html#deployment-inference",
    "title": "core",
    "section": "6 DEPLOYMENT | INFERENCE",
    "text": "6 DEPLOYMENT | INFERENCE\n\ncf.MODES = 'INFER'\n\n\nDf_Alloc_evalu_opt.shape\n\n(168, 97)\n\n\n\nlen(Labels)\n\n97\n\n\n\n#/// Record_Alloc_evalu_opt = []\n# Record_Alloc_evalu_opt\n# del Df_Alloc_evalu_opt\n\n\n##\n# print_schedule_shifts(Df_Alloc_evalu_opt)\n\n\nif 'INFER' in cf.MODES: print(L, T)\n\n1 168\n\n\n\n## INFER ENTRY-POINT\n## @anvil.server.callable\n# def get_schedule(start, slots_per_day, max_daily_slot_run, resources, demands_per_busyness, resource_expenses):\n# def get_schedule(\ndef infer_schedule( ##will also have a train_schedule\n    start, \n    slots_per_day, \n    max_daily_slot_run, \n    resources, \n    demands_per_busyness, \n    demands_per_volume, \n    demands_per_revenue, \n    resource_expenses):\n  ## this is function, not an if statement where globals can just be used\n  # global START_DATE_TIME, SLOTS_PER_DAY, MAX_DAILY_SLOT_RUN, RESOURCE_TYPES, \\\n  # RESOURCE_TYPE_COUNTS, TYPES, RESOURCE_IDS, DEMANDS_PER_BUSYNESS, DEMAND_PER_BUSYNESS, \\\n  # RESOURCE_EXPENSES, RESOURCE_EXPENSE, \\\n  # aNAMES, bNAMES, abNAMES, Labels, \\\n  global Labels, L, T, First_n_t, \\\n  ThetaStar_expCbarcum_Alloc_evalu_opt, ThetaStar_expCtilcum_Alloc_evalu_opt, \\\n  Best_theta_Alloc_evalu_opt, Record_Alloc_evalu_opt, Df_Alloc_evalu_opt\n\n  cf.START_DATE_TIME = start\n  sd = pd.to_datetime(start)\n  if not sd.strftime('%a')=='Mon':\n    error = f\"ERROR: {start} is a {sd.strftime('%A')}. It should be a Monday.\"\n    print(error)\n    return error\n  for_now_sd = pd.to_datetime('2023-12-04')\n  if not sd==for_now_sd:\n    error = f\"ERROR: Start date must be {for_now_sd} for now.\"\n    print(error) \n    return error\n\n  spd = int(slots_per_day)\n  if not spd == 24:\n    error = f\"ERROR: Slots per day must be 24 for now.\"\n    print(error)\n    return error\n  cf.SLOTS_PER_DAY = spd\n  \n  mdsr = int(max_daily_slot_run)\n  if not mdsr &lt;= spd:\n    error = f\"ERROR: 'Max daily slot run' must be less than or equal to 'Slots per day'\"\n    print(error)\n    return error\n  cf.MAX_DAILY_SLOT_RUN = mdsr\n\n  resource_type_and_ids = resources.split(';')\n  resource_types = []\n  resource_ids = []\n  resource_type_counts = []\n  for itm in resource_type_and_ids:\n      res_type, res_ids = itm.split(':')\n      resource_types.append(res_type.strip())\n      sep_ids = res_ids.split(','); ##print(f'{sep_ids=}')\n      for rid in sep_ids:\n          resource_ids.append(rid.strip())\n      resource_type_counts.append(len(sep_ids))\n  print(f'{resource_types=}')\n  print(f'{resource_type_counts=}')\n  print(f'{resource_ids=}')\n  if len(resource_types) &gt; cf.MAX_RESOURCE_TYPES:\n    error = f\"ERROR: The number of resource types should not exceed {cf.MAX_RESOURCE_TYPES}.\\nYou entered the following resource types: {resource_types}\"\n    print(error)\n    return error\n  if len(resource_ids) &gt; cf.MAX_RESOURCE_IDS:\n    error = f\"ERROR: The number of resources should not exceed {cf.MAX_RESOURCE_IDS}.\\nYou entered the following resources: {resource_ids}\"\n    print(error)\n    return error\n  cf.RESOURCE_TYPES = resource_types; print(f'{cf.RESOURCE_TYPES=}')\n  cf.RESOURCE_TYPE_COUNTS = resource_type_counts; print(f'{cf.RESOURCE_TYPE_COUNTS=}')\n  cf.TYPES = []\n  for i in range(len(cf.RESOURCE_TYPES)):\n    additional_types = [cf.RESOURCE_TYPES[i]]*cf.RESOURCE_TYPE_COUNTS[i]\n    for item in additional_types:\n      cf.TYPES.append(item)\n  print(f'{cf.TYPES=}')\n  cf.RESOURCE_IDS = resource_ids; print(f'{cf.RESOURCE_TYPE_COUNTS=}')\n\n  rates = demands_per_busyness.split(',')\n  if '' in rates:\n    error = f\"ERROR: There should be a demand-per-busyness for each resource type (role).\\nYou entered the following values: {demands_per_busyness}\"\n    print(error)\n    return error\n  rates = list(map(lambda x: float(x), rates))\n  print(f'{rates=}')\n  if len(rates) != len(cf.RESOURCE_TYPES):\n    error = f\"ERROR: The number of demands-per-busyness should be the same as the number of resource types (roles).\\nYou entered the following values: {demands_per_busyness}\"\n    print(error)\n    return error\n  cf.DEMANDS_PER_BUSYNESS = rates\n  cf.DEMAND_PER_BUSYNESS = {e: cf.DEMANDS_PER_BUSYNESS[i] for i,e in enumerate(cf.RESOURCE_TYPES)}\n\n  # /////////////////////////////////////////////////////////////////\n  rates = demands_per_volume.split(',')\n  if '' in rates:\n    error = f\"ERROR: There should be a demand-per-volume for each resource type (role).\\nYou entered the following values: {demands_per_volume}\"\n    print(error)\n    return error\n  rates = list(map(lambda x: float(x), rates))\n  print(f'{rates=}')\n  if len(rates) != len(cf.RESOURCE_TYPES):\n    error = f\"ERROR: The number of demands-per-volume should be the same as the number of resource types (roles).\\nYou entered the following values: {demands_per_volume}\"\n    print(error)\n    return error\n  cf.DEMANDS_PER_VOLUME = rates\n  cf.DEMAND_PER_VOLUME = {e: cf.DEMANDS_PER_VOLUME[i] for i,e in enumerate(cf.RESOURCE_TYPES)}\n\n  rates = demands_per_revenue.split(',')\n  if '' in rates:\n    error = f\"ERROR: There should be a demand-per-revenue for each resource type (role).\\nYou entered the following values: {demands_per_revenue}\"\n    print(error)\n    return error\n  rates = list(map(lambda x: float(x), rates))\n  print(f'{rates=}')\n  if len(rates) != len(cf.RESOURCE_TYPES):\n    error = f\"ERROR: The number of demands-per-revenue should be the same as the number of resource types (roles).\\nYou entered the following values: {demands_per_revenue}\"\n    print(error)\n    return error\n  cf.DEMANDS_PER_REVENUE = rates\n  cf.DEMAND_PER_REVENUE = {e: cf.DEMANDS_PER_REVENUE[i] for i,e in enumerate(cf.RESOURCE_TYPES)}\n  # \\\\\\\\\\\\\\\\\\\\\\\\\\\n\n  expenses = resource_expenses.split(',')\n  if '' in expenses:\n    error = f\"ERROR: There should be a resource expense for each resource type (role).\\nYou entered the following values: {resource_expenses}\"\n    print(error)\n    return error  \n  expenses = list(map(lambda x: float(x), expenses))\n  print(f'{expenses=}')\n  if len(expenses) != len(cf.RESOURCE_TYPES):\n    error = f\"ERROR: The number of resource expenses should be the same as the number of resource types (roles).\\nYou entered the following values: {resource_expenses}\"\n    print(error)\n    return error\n  cf.RESOURCE_EXPENSES = expenses\n  cf.RESOURCE_EXPENSE = {e: cf.RESOURCE_EXPENSES[i] for i,e in enumerate(cf.RESOURCE_TYPES)}\n\n  cf.aNAMES = [tup[0]+'_'+tup[1] for tup in zip(cf.TYPES, cf.RESOURCE_IDS)]; print(f'{cf.aNAMES=}')\n  cf.bNAMES = cf.RESOURCE_TYPES; print(f'{cf.bNAMES=}')\n  cf.abNAMES = [] ##to DEMAND b\n  for a in cf.aNAMES:\n    a0,a1 = a.split('_')\n    for b in cf.bNAMES:\n      if(a0==b):\n        abn = (a + '___' + b)\n        cf.abNAMES.append(abn)\n  print(f'{cf.abNAMES=}')\n  Labels = V.setup_plot_labels() #!!!!!!!!!!!!!!!!!!!!!!\n\n  L = 1 ##set global L\n  T = 7*cf.SLOTS_PER_DAY ##set global T\n  First_n_t = int(1*L*T) ##set global first_n_t\n\n  ## &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n  # do_apply() !!!!!!!!!!!!!!!!!!!!!!!!!!\n  ThetaStar_expCbarcum_Alloc_evalu_opt, ThetaStar_expCtilcum_Alloc_evalu_opt, \\\n  _, _, \\\n  Best_theta_Alloc_evalu_opt, Worst_theta_Alloc_evalu_opt, \\\n  _, _, \\\n  _, _, \\\n  Record_Alloc_evalu_opt = \\\n      inf.do_infer(L, T, best_theta_Alloc)\n  # inf.do_infer(L, T)\n  ## &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n\n  buf = StringIO()\n  ## &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n  ## prepped_sched = prepare_schedule_slots(Df_Alloc_evalu_opt, buf)\n  prepped_sched = inf.prepare_schedule_shifts(Df_Alloc_evalu_opt, buf)\n  ## &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\n  buf.close()\n\n  return prepped_sched\n\n\n## TEST INFER ENTRY-POINT\n# MODES = ['LEARN', 'APPLY']\n# MODES = ['EVALU', 'INFER']\n# if 'INFER' in cf.MODES:\n# res = get_schedule(\nres = infer_schedule(\n        start='2023-12-04', \n        slots_per_day=24, \n        max_daily_slot_run=10, #8 !!!!!!!!!!!!!!!!!!!!!!!\n        # resources = 'Manager: John, Penelope; SalesPerson: Sally, Sarah, Jim, Costa',\n        # resources = 'SupChief: Ruan, Francine; Sup: Azra, Wendie, Penny, Sally'\n        resources = 'ChiefTeller: Ruan, Francine; Teller: Azra, Wendie, Penny, Sally',\n        demands_per_busyness = '.2, 4',\n        demands_per_volume = '.02, .4',\n        demands_per_revenue = '.05, .8',\n        resource_expenses = '35.17, 23.85'\n)\nres\n\nresource_types=['ChiefTeller', 'Teller']\nresource_type_counts=[2, 4]\nresource_ids=['Ruan', 'Francine', 'Azra', 'Wendie', 'Penny', 'Sally']\ncf.RESOURCE_TYPES=['ChiefTeller', 'Teller']\ncf.RESOURCE_TYPE_COUNTS=[2, 4]\ncf.TYPES=['ChiefTeller', 'ChiefTeller', 'Teller', 'Teller', 'Teller', 'Teller']\ncf.RESOURCE_TYPE_COUNTS=[2, 4]\nrates=[0.2, 4.0]\nrates=[0.02, 0.4]\nrates=[0.05, 0.8]\nexpenses=[35.17, 23.85]\ncf.aNAMES=['ChiefTeller_Ruan', 'ChiefTeller_Francine', 'Teller_Azra', 'Teller_Wendie', 'Teller_Penny', 'Teller_Sally']\ncf.bNAMES=['ChiefTeller', 'Teller']\ncf.abNAMES=['ChiefTeller_Ruan___ChiefTeller', 'ChiefTeller_Francine___ChiefTeller', 'Teller_Azra___Teller', 'Teller_Wendie___Teller', 'Teller_Penny___Teller', 'Teller_Sally___Teller']\nnumThetas=1\n... printing every 1th theta (if considered) ...\n    %%% l=1\n0/0, 312,679, Theta(thCumSlots=0, thSickProb=0, thCumMerits=0, thContSlots=1, thSelect='random')\n\n\n/Users/kobus/AIShiftScheduler_KE5/AIShiftScheduler_KE5/policy.py:212: RuntimeWarning: invalid value encountered in scalar divide\n  Ctilcum_tmp = np.sum(np.square(np.array(CcumIomega__lI) - Cbarcum_tmp))/(L - 1)\n\n\n\"SCHEDULE SHIFTS:\\n================\\n\\n************** Manager_Matt:\\nMon Dec 04 09h00\\nMon Dec 04 17h00\\n\\nTue Dec 05 09h00\\nTue Dec 05 17h00\\n\\nWed Dec 06 09h00\\nWed Dec 06 17h00\\n\\nThu Dec 07 09h00\\nThu Dec 07 17h00\\n\\nFri Dec 08 09h00\\nFri Dec 08 17h00\\n\\nSat Dec 09 09h00\\nSat Dec 09 17h00\\n\\nSun Dec 10 09h00\\nSun Dec 10 17h00\\n\\n************** AssistMngr_Mike:\\nMon Dec 04 09h00\\nMon Dec 04 17h00\\n\\nTue Dec 05 17h00\\nTue Dec 05 21h00\\n\\nWed Dec 06 17h00\\nWed Dec 06 21h00\\n\\nThu Dec 07 16h00\\nThu Dec 07 21h00\\n\\nFri Dec 08 17h00\\nFri Dec 08 21h00\\n\\nSat Dec 09 13h00\\nSat Dec 09 20h00\\n\\nSun Dec 10 09h00\\nSun Dec 10 17h00\\n\\n************** AssistMngr_Tanner:\\nMon Dec 04 17h00\\nMon Dec 04 21h00\\n\\nTue Dec 05 09h00\\nTue Dec 05 17h00\\n\\nWed Dec 06 09h00\\nWed Dec 06 17h00\\n\\nThu Dec 07 09h00\\nThu Dec 07 17h00\\n\\nFri Dec 08 09h00\\nFri Dec 08 17h00\\n\\nSat Dec 09 09h00\\nSat Dec 09 17h00\\n\\nSun Dec 10 14h00\\nSun Dec 10 19h00\\n\\n************** RetailAssoc_Jake:\\nMon Dec 04 17h00\\nMon Dec 04 20h00\\n\\nTue Dec 05 16h00\\nTue Dec 05 20h00\\n\\nWed Dec 06 15h00\\nWed Dec 06 20h00\\n\\nThu Dec 07 15h00\\nThu Dec 07 20h00\\n\\nFri Dec 08 14h00\\nFri Dec 08 20h00\\n\\nSat Dec 09 15h00\\nSat Dec 09 20h00\\n\\nSun Dec 10 14h00\\nSun Dec 10 19h00\\n\\n************** RetailAssoc_James:\\nMon Dec 04 09h00\\nMon Dec 04 15h00\\n\\nThu Dec 07 12h00\\nThu Dec 07 15h00\\n\\nFri Dec 08 12h00\\nFri Dec 08 15h00\\n\\nSat Dec 09 09h00\\nSat Dec 09 15h00\\n\\nSun Dec 10 09h00\\nSun Dec 10 15h00\\n\\n************** RetailAssoc_Jane:\\nMon Dec 04 15h00\\nMon Dec 04 19h00\\n\\nTue Dec 05 09h00\\nTue Dec 05 17h00\\n\\nWed Dec 06 09h00\\nWed Dec 06 17h00\\n\\nThu Dec 07 09h00\\nThu Dec 07 17h00\\n\\nFri Dec 08 09h00\\nFri Dec 08 16h00\\n\\nSat Dec 09 09h00\\nSat Dec 09 17h00\\n\\nSun Dec 10 12h00\\nSun Dec 10 19h00\\n\\n************** RetailAssoc_John:\\nMon Dec 04 18h00\\nMon Dec 04 21h00\\n\\nTue Dec 05 18h00\\nTue Dec 05 21h00\\n\\nWed Dec 06 18h00\\nWed Dec 06 21h00\\n\\nThu Dec 07 18h00\\nThu Dec 07 21h00\\n\\nFri Dec 08 18h00\\nFri Dec 08 21h00\\n\\nSat Dec 09 18h00\\nSat Dec 09 20h00\\n\\nSun Dec 10 18h00\\nSun Dec 10 19h00\\n\\n************** RetailAssoc_Jim:\\nTue Dec 05 09h00\\nTue Dec 05 13h00\\n\\nWed Dec 06 12h00\\nWed Dec 06 13h00\\n\\nSat Dec 09 10h00\\nSat Dec 09 13h00\\n\\n************** RetailAssoc_Jenny:\\nMon Dec 04 09h00\\nMon Dec 04 14h00\\n\\nWed Dec 06 09h00\\nWed Dec 06 14h00\\n\\nThu Dec 07 09h00\\nThu Dec 07 14h00\\n\\nFri Dec 08 09h00\\nFri Dec 08 14h00\\n\\nSat Dec 09 10h00\\nSat Dec 09 14h00\\n\\nSun Dec 10 09h00\\nSun Dec 10 14h00\\n\\n************** RetailAssoc_Jeremy:\\nTue Dec 05 09h00\\nTue Dec 05 12h00\\n\\nWed Dec 06 09h00\\nWed Dec 06 12h00\\n\\nThu Dec 07 09h00\\nThu Dec 07 12h00\\n\\nFri Dec 08 09h00\\nFri Dec 08 12h00\\n\\nSat Dec 09 10h00\\nSat Dec 09 12h00\\n\\nSun Dec 10 09h00\\nSun Dec 10 12h00\\n\\n************** RetailAssoc_Judy:\\nMon Dec 04 15h00\\nMon Dec 04 17h00\\n\\nTue Dec 05 13h00\\nTue Dec 05 17h00\\n\\nWed Dec 06 15h00\\nWed Dec 06 17h00\\n\\nThu Dec 07 15h00\\nThu Dec 07 17h00\\n\\nFri Dec 08 15h00\\nFri Dec 08 17h00\\n\\nSat Dec 09 11h00\\nSat Dec 09 17h00\\n\\nSun Dec 10 11h00\\nSun Dec 10 17h00\\n\\n************** RetailAssoc_Julie:\\nMon Dec 04 14h00\\nMon Dec 04 17h00\\n\\nTue Dec 05 12h00\\nTue Dec 05 17h00\\n\\nWed Dec 06 14h00\\nWed Dec 06 17h00\\n\\nThu Dec 07 16h00\\nThu Dec 07 17h00\\n\\nFri Dec 08 15h00\\nFri Dec 08 17h00\\n\\nSat Dec 09 12h00\\nSat Dec 09 17h00\\n\\nSun Dec 10 13h00\\nSun Dec 10 17h00\\n\\n************** RetailAssoc_Jeffrey:\\nMon Dec 04 09h00\\nMon Dec 04 15h00\\n\\nWed Dec 06 13h00\\nWed Dec 06 15h00\\n\\nThu Dec 07 14h00\\nThu Dec 07 15h00\\n\\nSat Dec 09 09h00\\nSat Dec 09 15h00\\n\\nSun Dec 10 14h00\\nSun Dec 10 15h00\\n\\ncf.CONTIGUOUS_REWARD=1\\ncf.MAX_DAILY_SLOT_RUN=10 (HOURs)\\ncf.TH_CumSlots_SPEC=(0, 1, 0.2)\\ncf.TH_SickProb_SPEC=(0, 1, 0.2)\\ncf.TH_CumMerits_SPEC=(0, 1, 0.2)\\ncf.TH_ContSlots_SPEC=(0, 1, 0.2)\\ncf.TH_Select_SPEC=('random',)\\n\"\n\n\n\ncf.MODES\n\n'INFER'\n\n\n\n##\nif 'INFER' in cf.MODES: \n  print(cf.START_DATE_TIME, cf.SLOTS_PER_DAY, cf.MAX_DAILY_SLOT_RUN, L, T, First_n_t)\n\n2023-12-04 24 10 1 168 168\n\n\n\n## test\nif 'INFER' in cf.MODES:\n  print(res)\n\nSCHEDULE SHIFTS:\n================\n\n************** Manager_Matt:\nMon Dec 04 09h00\nMon Dec 04 17h00\n\nTue Dec 05 09h00\nTue Dec 05 17h00\n\nWed Dec 06 09h00\nWed Dec 06 17h00\n\nThu Dec 07 09h00\nThu Dec 07 17h00\n\nFri Dec 08 09h00\nFri Dec 08 17h00\n\nSat Dec 09 09h00\nSat Dec 09 17h00\n\nSun Dec 10 09h00\nSun Dec 10 17h00\n\n************** AssistMngr_Mike:\nMon Dec 04 09h00\nMon Dec 04 17h00\n\nTue Dec 05 17h00\nTue Dec 05 21h00\n\nWed Dec 06 17h00\nWed Dec 06 21h00\n\nThu Dec 07 16h00\nThu Dec 07 21h00\n\nFri Dec 08 17h00\nFri Dec 08 21h00\n\nSat Dec 09 13h00\nSat Dec 09 20h00\n\nSun Dec 10 09h00\nSun Dec 10 17h00\n\n************** AssistMngr_Tanner:\nMon Dec 04 17h00\nMon Dec 04 21h00\n\nTue Dec 05 09h00\nTue Dec 05 17h00\n\nWed Dec 06 09h00\nWed Dec 06 17h00\n\nThu Dec 07 09h00\nThu Dec 07 17h00\n\nFri Dec 08 09h00\nFri Dec 08 17h00\n\nSat Dec 09 09h00\nSat Dec 09 17h00\n\nSun Dec 10 14h00\nSun Dec 10 19h00\n\n************** RetailAssoc_Jake:\nMon Dec 04 17h00\nMon Dec 04 20h00\n\nTue Dec 05 16h00\nTue Dec 05 20h00\n\nWed Dec 06 15h00\nWed Dec 06 20h00\n\nThu Dec 07 15h00\nThu Dec 07 20h00\n\nFri Dec 08 14h00\nFri Dec 08 20h00\n\nSat Dec 09 15h00\nSat Dec 09 20h00\n\nSun Dec 10 14h00\nSun Dec 10 19h00\n\n************** RetailAssoc_James:\nMon Dec 04 09h00\nMon Dec 04 15h00\n\nThu Dec 07 12h00\nThu Dec 07 15h00\n\nFri Dec 08 12h00\nFri Dec 08 15h00\n\nSat Dec 09 09h00\nSat Dec 09 15h00\n\nSun Dec 10 09h00\nSun Dec 10 15h00\n\n************** RetailAssoc_Jane:\nMon Dec 04 15h00\nMon Dec 04 19h00\n\nTue Dec 05 09h00\nTue Dec 05 17h00\n\nWed Dec 06 09h00\nWed Dec 06 17h00\n\nThu Dec 07 09h00\nThu Dec 07 17h00\n\nFri Dec 08 09h00\nFri Dec 08 16h00\n\nSat Dec 09 09h00\nSat Dec 09 17h00\n\nSun Dec 10 12h00\nSun Dec 10 19h00\n\n************** RetailAssoc_John:\nMon Dec 04 18h00\nMon Dec 04 21h00\n\nTue Dec 05 18h00\nTue Dec 05 21h00\n\nWed Dec 06 18h00\nWed Dec 06 21h00\n\nThu Dec 07 18h00\nThu Dec 07 21h00\n\nFri Dec 08 18h00\nFri Dec 08 21h00\n\nSat Dec 09 18h00\nSat Dec 09 20h00\n\nSun Dec 10 18h00\nSun Dec 10 19h00\n\n************** RetailAssoc_Jim:\nTue Dec 05 09h00\nTue Dec 05 13h00\n\nWed Dec 06 12h00\nWed Dec 06 13h00\n\nSat Dec 09 10h00\nSat Dec 09 13h00\n\n************** RetailAssoc_Jenny:\nMon Dec 04 09h00\nMon Dec 04 14h00\n\nWed Dec 06 09h00\nWed Dec 06 14h00\n\nThu Dec 07 09h00\nThu Dec 07 14h00\n\nFri Dec 08 09h00\nFri Dec 08 14h00\n\nSat Dec 09 10h00\nSat Dec 09 14h00\n\nSun Dec 10 09h00\nSun Dec 10 14h00\n\n************** RetailAssoc_Jeremy:\nTue Dec 05 09h00\nTue Dec 05 12h00\n\nWed Dec 06 09h00\nWed Dec 06 12h00\n\nThu Dec 07 09h00\nThu Dec 07 12h00\n\nFri Dec 08 09h00\nFri Dec 08 12h00\n\nSat Dec 09 10h00\nSat Dec 09 12h00\n\nSun Dec 10 09h00\nSun Dec 10 12h00\n\n************** RetailAssoc_Judy:\nMon Dec 04 15h00\nMon Dec 04 17h00\n\nTue Dec 05 13h00\nTue Dec 05 17h00\n\nWed Dec 06 15h00\nWed Dec 06 17h00\n\nThu Dec 07 15h00\nThu Dec 07 17h00\n\nFri Dec 08 15h00\nFri Dec 08 17h00\n\nSat Dec 09 11h00\nSat Dec 09 17h00\n\nSun Dec 10 11h00\nSun Dec 10 17h00\n\n************** RetailAssoc_Julie:\nMon Dec 04 14h00\nMon Dec 04 17h00\n\nTue Dec 05 12h00\nTue Dec 05 17h00\n\nWed Dec 06 14h00\nWed Dec 06 17h00\n\nThu Dec 07 16h00\nThu Dec 07 17h00\n\nFri Dec 08 15h00\nFri Dec 08 17h00\n\nSat Dec 09 12h00\nSat Dec 09 17h00\n\nSun Dec 10 13h00\nSun Dec 10 17h00\n\n************** RetailAssoc_Jeffrey:\nMon Dec 04 09h00\nMon Dec 04 15h00\n\nWed Dec 06 13h00\nWed Dec 06 15h00\n\nThu Dec 07 14h00\nThu Dec 07 15h00\n\nSat Dec 09 09h00\nSat Dec 09 15h00\n\nSun Dec 10 14h00\nSun Dec 10 15h00\n\ncf.CONTIGUOUS_REWARD=1\ncf.MAX_DAILY_SLOT_RUN=10 (HOURs)\ncf.TH_CumSlots_SPEC=(0, 1, 0.2)\ncf.TH_SickProb_SPEC=(0, 1, 0.2)\ncf.TH_CumMerits_SPEC=(0, 1, 0.2)\ncf.TH_ContSlots_SPEC=(0, 1, 0.2)\ncf.TH_Select_SPEC=('random',)\n\n\n\n\n# //////////////////////////////////\n\n\nDf_Alloc_evalu_opt.columns\n\nIndex(['piName', 'theta', 'l', 't', 'dt', 'RAvail_t_Manager_Matt',\n       'RAvail_t_AssistMngr_Mike', 'RAvail_t_AssistMngr_Tanner',\n       'RAvail_t_RetailAssoc_Jake', 'RAvail_t_RetailAssoc_James',\n       'RAvail_t_RetailAssoc_Jane', 'RAvail_t_RetailAssoc_John',\n       'RAvail_t_RetailAssoc_Jim', 'RAvail_t_RetailAssoc_Jenny',\n       'RAvail_t_RetailAssoc_Jeremy', 'RAvail_t_RetailAssoc_Judy',\n       'RAvail_t_RetailAssoc_Julie', 'RAvail_t_RetailAssoc_Jeffrey',\n       'RCumSlots_t_Manager_Matt', 'RCumSlots_t_AssistMngr_Mike',\n       'RCumSlots_t_AssistMngr_Tanner', 'RCumSlots_t_RetailAssoc_Jake',\n       'RCumSlots_t_RetailAssoc_James', 'RCumSlots_t_RetailAssoc_Jane',\n       'RCumSlots_t_RetailAssoc_John', 'RCumSlots_t_RetailAssoc_Jim',\n       'RCumSlots_t_RetailAssoc_Jenny', 'RCumSlots_t_RetailAssoc_Jeremy',\n       'RCumSlots_t_RetailAssoc_Judy', 'RCumSlots_t_RetailAssoc_Julie',\n       'RCumSlots_t_RetailAssoc_Jeffrey', 'RCumMerits_t_Manager_Matt',\n       'RCumMerits_t_AssistMngr_Mike', 'RCumMerits_t_AssistMngr_Tanner',\n       'RCumMerits_t_RetailAssoc_Jake', 'RCumMerits_t_RetailAssoc_James',\n       'RCumMerits_t_RetailAssoc_Jane', 'RCumMerits_t_RetailAssoc_John',\n       'RCumMerits_t_RetailAssoc_Jim', 'RCumMerits_t_RetailAssoc_Jenny',\n       'RCumMerits_t_RetailAssoc_Jeremy', 'RCumMerits_t_RetailAssoc_Judy',\n       'RCumMerits_t_RetailAssoc_Julie', 'RCumMerits_t_RetailAssoc_Jeffrey',\n       'RComplete_t_Manager_Matt', 'RComplete_t_AssistMngr_Mike',\n       'RComplete_t_AssistMngr_Tanner', 'RComplete_t_RetailAssoc_Jake',\n       'RComplete_t_RetailAssoc_James', 'RComplete_t_RetailAssoc_Jane',\n       'RComplete_t_RetailAssoc_John', 'RComplete_t_RetailAssoc_Jim',\n       'RComplete_t_RetailAssoc_Jenny', 'RComplete_t_RetailAssoc_Jeremy',\n       'RComplete_t_RetailAssoc_Judy', 'RComplete_t_RetailAssoc_Julie',\n       'RComplete_t_RetailAssoc_Jeffrey', 'DSlot_t_Manager',\n       'DSlot_t_AssistMngr', 'DSlot_t_RetailAssoc', 'DBusy_t_Manager',\n       'DBusy_t_AssistMngr', 'DBusy_t_RetailAssoc', 'DVolume_t_Manager',\n       'DVolume_t_AssistMngr', 'DVolume_t_RetailAssoc', 'DRevenue_t_Manager',\n       'DRevenue_t_AssistMngr', 'DRevenue_t_RetailAssoc', 'DMax_t_Manager',\n       'DMax_t_AssistMngr', 'DMax_t_RetailAssoc', 'B_t', 'V_t', 'N_t',\n       'Ucum_Manager', 'Ucum_AssistMngr', 'Ucum_RetailAssoc', 'Ucum_Total',\n       'Ccum_CumSlots', 'Ccum_SickProb', 'Ccum_CumMerits', 'Ccum_ContSlots',\n       'Ccum', 'Allocd_t_Manager_Matt___Manager',\n       'Allocd_t_AssistMngr_Mike___AssistMngr',\n       'Allocd_t_AssistMngr_Tanner___AssistMngr',\n       'Allocd_t_RetailAssoc_Jake___RetailAssoc',\n       'Allocd_t_RetailAssoc_James___RetailAssoc',\n       'Allocd_t_RetailAssoc_Jane___RetailAssoc',\n       'Allocd_t_RetailAssoc_John___RetailAssoc',\n       'Allocd_t_RetailAssoc_Jim___RetailAssoc',\n       'Allocd_t_RetailAssoc_Jenny___RetailAssoc',\n       'Allocd_t_RetailAssoc_Jeremy___RetailAssoc',\n       'Allocd_t_RetailAssoc_Judy___RetailAssoc',\n       'Allocd_t_RetailAssoc_Julie___RetailAssoc',\n       'Allocd_t_RetailAssoc_Jeffrey___RetailAssoc'],\n      dtype='object')\n\n\n\n# \\\\\\\\\\\\\n\n\n##\n# V.plot_records(\n#   df=Df_Alloc_evalu_opt,\n#   ## df_non=Df_Alloc_evalu_non, \n#   df_non=None,\n#   pars=defaultdict(str, {\n#     'T': T,\n#     'thCumSlots': Best_theta_Alloc_evalu_opt.thCumSlots,\n#     'thSickProb': Best_theta_Alloc_evalu_opt.thSickProb,\n#     'legendLabels': [r'$\\mathrm{opt}$', r'$\\mathrm{non}$'],\n#     'suptitle': f'EVALUATION OF X__Alloc POLICY'+'\\n'+f'(first {First_n_t} records)'+'\\n'+ \\\n#     f'L = {L}, T = {T}, '+ \\\n#     r\"$\\theta^* =$(\"+ \\\n#       str(f'{Best_theta_Alloc_evalu_opt[0]:,.2f}')+\", \"+ \\\n#       str(f'{Best_theta_Alloc_evalu_opt[1]:,.2f}')+\", \"+ \\\n#       str(f'{Best_theta_Alloc_evalu_opt[2]:,.2f}')+\", \"+ \\\n#       str(f'{Best_theta_Alloc_evalu_opt[3]:,.2f}')+\", \"+\n#       f'{Best_theta_Alloc_evalu_opt[4]}'+\"), \" \\\n#   }),\n# )\n\n\n# if 'INFER' in MODES:\n#   anvil.server.wait_forever()",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AIShiftScheduler_KE5",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "AIShiftScheduler_KE5"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "AIShiftScheduler_KE5",
    "section": "Install",
    "text": "Install\npip install AIShiftScheduler_KE5",
    "crumbs": [
      "AIShiftScheduler_KE5"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "AIShiftScheduler_KE5",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "AIShiftScheduler_KE5"
    ]
  },
  {
    "objectID": "simulators.html",
    "href": "simulators.html",
    "title": "simulators",
    "section": "",
    "text": "# Set up autoreload\nnp.__version__\n\n'1.24.4'\n# !pip freeze | grep pandas\n# !pip freeze|grep openpyxl\n# !pip freeze\n# !pip install -U ray==2.8.1\n# !pip install openpyxl",
    "crumbs": [
      "simulators"
    ]
  },
  {
    "objectID": "simulators.html#demand-simulation",
    "href": "simulators.html#demand-simulation",
    "title": "simulators",
    "section": "Demand simulation",
    "text": "Demand simulation\n\nclass DemandSimulator():\n  def __init__(self,\n    T__sim=cf.SIM_T,\n    muD=cf.SIM_MU_D,\n    eventTimeD=cf.SIM_EVENT_TIME_D,\n    muDeltaD=cf.SIM_MU_DELTA_D,\n    seed=None):\n    self.time = 0\n    self.T__sim = cf.SIM_T\n    self.muD = cf.SIM_MU_D\n    self.eventTimeD = cf.SIM_EVENT_TIME_D\n    self.muDeltaD = cf.SIM_MU_DELTA_D\n    self.prng = np.random.RandomState(seed)\n\n  def simulate(self):\n    if self.time &gt; self.T__sim - 1:\n      self.time = 0\n    D_tt1 = {}\n    for bn in cf.bNAMES:\n      if self.eventTimeD[bn] and self.time &gt; self.eventTimeD[bn]: ##event for entity\n        D_tt1[bn] = self.muDeltaD[bn] + self.prng.poisson(self.muD[bn]) ##after event\n      else:\n        D_tt1[bn] = self.prng.poisson(self.muD[bn])\n    self.time += 1\n    return {bn: max(0, D_tt1[bn]) for bn in cf.bNAMES} ##always positive\n\n\nExample of usage\n\ndem_sim = DemandSimulator(seed=1234)\nDemandData = []\nfor i in range(cf.SIM_T):\n  d = list(dem_sim.simulate().values())\n  DemandData.append(d)\nlabels = [f'{bn}_dem' for bn in cf.bNAMES]\ndf = pd.DataFrame.from_records(data=DemandData, columns=labels); df[:10]\n\n\n\n\n\n\n\n\n\nManager_dem\nAssistMngr_dem\nRetailAssoc_dem\n\n\n\n\n0\n5\n4\n3\n\n\n1\n2\n4\n3\n\n\n2\n6\n2\n3\n\n\n3\n1\n3\n2\n\n\n4\n3\n6\n2\n\n\n5\n2\n1\n0\n\n\n6\n4\n3\n1\n\n\n7\n7\n1\n4\n\n\n8\n3\n5\n0\n\n\n9\n4\n3\n1\n\n\n\n\n\n\n\n\n\ndef plot_output(df1, df2):\n  n_charts = len(cf.bNAMES)\n  ylabelsize = 16\n  mpl.rcParams['lines.linewidth'] = 1.2\n  default_colors = plt.rcParams['axes.prop_cycle'].by_key()['color']\n  fig, axs = plt.subplots(n_charts, sharex=True)\n  fig.set_figwidth(13); fig.set_figheight(9)\n  fig.suptitle('Demand Simulation', fontsize=20)\n\n  for i,bn in enumerate(cf.bNAMES):\n    axs[i].set_title(f'Demanded {bn}')\n    axs[i].set_ylim(auto=True); axs[i].spines['top'].set_visible(False); axs[i].spines['right'].set_visible(True); axs[i].spines['bottom'].set_visible(False)\n    axs[i].step(df1[f'{bn}_dem'], 'r-')\n    ## axs[i].axhline(y=dem_sim.muD[e], color='k', linestyle=':')\n    axs[i].axhline(y=0, color='k', linestyle=':')\n\n  axs[i].set_xlabel('$t\\ \\mathrm{[hourly\\ windows]}$', rotation=0, ha='center', va='center', fontweight='bold', size=ylabelsize)\n\n\nplot_output(df, None)",
    "crumbs": [
      "simulators"
    ]
  },
  {
    "objectID": "simulators.html#merit-simulation",
    "href": "simulators.html#merit-simulation",
    "title": "simulators",
    "section": "Merit simulation",
    "text": "Merit simulation\n\n#/// MERIT_PROBS = load_merit_probs(f'{base_dir}/{file_name}')\n\n\ncf.MERIT_PROBS\n\n\n\n\n\n\n\n\n\nResourceId\nMeritProb\nDemeritProb\n\n\n\n\n0\n1\n0.0100\n0.0400\n\n\n1\n2\n0.2000\n0.0900\n\n\n2\n3\n0.3000\n0.0300\n\n\n3\n4\n0.2000\n0.1500\n\n\n4\n5\n0.0500\n0.0200\n\n\n5\n6\n0.1000\n0.0100\n\n\n6\n7\n0.2000\n0.0200\n\n\n7\n8\n0.3000\n0.3000\n\n\n8\n9\n0.2000\n0.0100\n\n\n9\n10\n0.0600\n0.1200\n\n\n\n\n\n\n\n\n\n## copy from the generated file and paste into ExogInfo tab of shift_scheduler_data.xlsx\nclass MeritSimulator():\n  def __init__(self, seed=None):\n    self.prng = np.random.RandomState(seed)\n\n  def simulate(self):\n    M_tt1 = {}\n    for an in cf.aNAMES:\n      resourceId,_ = an.split('_')\n      a,b = cf.MERIT_PROBS.loc[\n        cf.MERIT_PROBS['ResourceId'] == resourceId,\n        ['MeritProb', 'DemeritProb']\n      ].values[0]\n      if np.random.uniform() &lt; a: merit = 1\n      else: merit = 0\n      if np.random.uniform() &lt; b: demerit = 1\n      else: demerit = 0\n      M_tt1[an] = merit - demerit ##net merit\n    return M_tt1\n\n\nExample of usage\n\n## breaks, need to fix\n# ## copy from the generated file and paste into ExogInfo tab of shift_scheduler_data.xlsx\n# mer_sim = MeritSimulator(seed=1234)\n# MeritData = []\n# # for i in range(100):\n# for i in range(672):\n#   mer = list(mer_sim.simulate().values())\n#   MeritData.append(mer)\n# labels = [f'{an}_merit' for an in cf.aNAMES]\n# df = pd.DataFrame.from_records(data=MeritData, columns=labels); df[:10]\n\n\n# ////////////////////////////////////\n\n\n# cf.bNAMES\n\n['Manager', 'AssistMngr', 'RetailAssoc']\n\n\n\n# an = cf.aNAMES[0]\n\n\n# # resourceId,_ = an.split('_'); resourceId\n# _,resourceId = an.split('_'); resourceId\n\n'Matt'\n\n\n\n# # MERIT_PROBS\n# cf.MERIT_PROBS['ResourceId']\n\n\n\n\n\n\n\n\n\nResourceId\nMeritProb\nDemeritProb\n\n\n\n\n0\n1\n0.0100\n0.0400\n\n\n1\n2\n0.2000\n0.0900\n\n\n2\n3\n0.3000\n0.0300\n\n\n3\n4\n0.2000\n0.1500\n\n\n4\n5\n0.0500\n0.0200\n\n\n5\n6\n0.1000\n0.0100\n\n\n6\n7\n0.2000\n0.0200\n\n\n7\n8\n0.3000\n0.3000\n\n\n8\n9\n0.2000\n0.0100\n\n\n9\n10\n0.0600\n0.1200\n\n\n\n\n\n\n\n\n\n# ///\n# a,b = MERIT_PROBS.loc[\n      #   MERIT_PROBS['ResourceId'] == resourceId,\n      #   ['MeritProb', 'DemeritProb']\n      # ].values[0]\n\n\n# aNAMES\n\n['Manager_Matt',\n 'AssistMngr_Mike',\n 'AssistMngr_Tanner',\n 'RetailAssoc_Jake',\n 'RetailAssoc_James',\n 'RetailAssoc_Jane',\n 'RetailAssoc_John',\n 'RetailAssoc_Jim',\n 'RetailAssoc_Jenny',\n 'RetailAssoc_Jeremy',\n 'RetailAssoc_Judy',\n 'RetailAssoc_Julie',\n 'RetailAssoc_Jeffrey']\n\n\n\n# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n\n## copy from this file and paste into ExogInfo tab of shift_scheduler_data.xlsx\n## df.to_excel('merits.xlsx', index=False)\n\n\n## breaks, need to fix\n# import random\n# def plot_output(df1, df2):\n#   n_charts = len(cf.aNAMES)\n#   ylabelsize = 16\n#   mpl.rcParams['lines.linewidth'] = 1.2\n#   default_colors = plt.rcParams['axes.prop_cycle'].by_key()['color']\n#   fig, axs = plt.subplots(n_charts, sharex=True)\n#   fig.set_figwidth(13); fig.set_figheight(9)\n#   fig.suptitle('Merit Simulation', fontsize=20)\n\n#   for i,an in enumerate(cf.aNAMES):\n#     axs[i].set_title(f'Merits for {an}')\n#     axs[i].set_ylim(-1, 1); axs[i].spines['top'].set_visible(False); axs[i].spines['right'].set_visible(True); axs[i].spines['bottom'].set_visible(False)\n#     axs[i].step(df1[f'{an}_merit'], 'r-')\n#     ## axs[i].axhline(y=dem_sim.muD[e], color='k', linestyle=':')\n#     axs[i].axhline(y=0, color='k', linestyle=':')\n#   axs[i].set_xlabel('$t\\ \\mathrm{[hourly\\ windows]}$', rotation=0, ha='center', va='center', fontweight='bold', size=ylabelsize)\n# plot_output(df, None)",
    "crumbs": [
      "simulators"
    ]
  },
  {
    "objectID": "policy.html",
    "href": "policy.html",
    "title": "policy",
    "section": "",
    "text": "# Set up autoreload\n\n\npd.__version__\n\n'2.0.3'\n\n\n\n# !pip freeze | grep pandas\n# !pip freeze|grep openpyxl\n# !pip freeze\n\n\n# !pip install -U ray==2.8.1\n# !pip install openpyxl\n\n\n\nRemoteFunction object at 0x7f09030c5370&gt;\n\n RemoteFunction object at 0x7f09030c5370&gt; (*args, **kwargs)\n\nA remote function.\nThis is a decorated function. It can be used to spawn tasks.\nAttributes: _language: The target language. _function: The original function. _function_descriptor: The function descriptor. This is not defined until the remote function is first invoked because that is when the function is pickled, and the pickled function is used to compute the function descriptor. _function_name: The module and function name. _num_cpus: The default number of CPUs to use for invocations of this remote function. _num_gpus: The default number of GPUs to use for invocations of this remote function. _memory: The heap memory request in bytes for this task/actor, rounded down to the nearest integer. _resources: The default custom resource requirements for invocations of this remote function. _num_returns: The default number of return values for invocations of this remote function. _max_calls: The number of times a worker can execute this function before exiting. _max_retries: The number of times this task may be retried on worker failure. _retry_exceptions: Whether application-level errors should be retried. This can be a boolean or a list/tuple of exceptions that should be retried. _runtime_env: The runtime environment for this task. _decorator: An optional decorator that should be applied to the remote function invocation (as opposed to the function execution) before invoking the function. The decorator must return a function that takes in two arguments (“args” and “kwargs”). In most cases, it should call the function that was passed into the decorator and return the resulting ObjectRefs. For an example, see “test_decorated_function” in “python/ray/tests/test_basic.py”. _function_signature: The function signature. _last_export_session_and_job: A pair of the last exported session and job to help us to know whether this function was exported. This is an imperfect mechanism used to determine if we need to export the remote function again. It is imperfect in the sense that the actor class definition could be exported multiple times by different workers. _scheduling_strategy: Strategy about how to schedule this remote function.\n\nclass MyClass(int): pass\n\n\n@patch\ndef func(self: MyClass, a): return self + a\n\n\nmc = MyClass(3)\n\n\nmc.func(10)\n\n13\n\n\n\nsource\n\n\nPolicy\n\n Policy ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nPolicy.build_policy\n\n Policy.build_policy (info)\n\n\nsource\n\n\nPolicy.build_theta\n\n Policy.build_theta (info)\n\n\nsource\n\n\nPolicy.X__Alloc\n\n Policy.X__Alloc (t, dt, S_t, x_t, theta)\n\n\nsource\n\n\nPolicy.run_grid_sample_paths\n\n Policy.run_grid_sample_paths (theta, piName, record, L, T)\n\n\nsource\n\n\nPolicy.perform_grid_search_sample_paths\n\n Policy.perform_grid_search_sample_paths (piName, thetas, L, T)\n\n\n## def parallel_run_grid_sample_paths(...) is a function above this class\n\n\nsource\n\n\nPolicy.parallel_perform_grid_search_sample_paths\n\n Policy.parallel_perform_grid_search_sample_paths (piName, thetas, L, T)\n\n\nsource\n\n\nPolicy.grid_search_thetas_1_1\n\n Policy.grid_search_thetas_1_1 (thetasA, thetasA_name, names)\n\n\nsource\n\n\nPolicy.grid_search_thetas_1_2\n\n Policy.grid_search_thetas_1_2 (thetasA, thetasA_name, names)\n\n\n## EXAMPLE:\n## thetasA: Adj\n## thetasA_name: 'thAdj'\n## names: ELA, SON\n## 1_4: 1 theta sub-vectors, each having 4 thetas\n## thetas = grid_search_thetas_1_4(thetasBuy 'thAdj', bNAMES)\n@patch\ndef grid_search_thetas_1_4(self:Policy, thetasA, thetasA_name, names):\n    thetas = [\n    self.build_theta({thetasA_name: {names[0]: thA0, names[1]: thA1, names[2]: thA2, names[3]: thA3}})\n    for thA0 in thetasA[names[0]]\n      for thA1 in thetasA[names[1]]\n        for thA2 in thetasA[names[2]]\n          for thA3 in thetasA[names[3]]\n    ]\n    return thetas\n\n\n## EXAMPLE:\n## thetasA: Buy\n## thetasB: Max\n## thetasA_name: 'thBuy'\n## thetasB_name: 'thMax'\n## names: ELA\n## 2_1: 2 theta sub-vectors, each having 1 theta\n## thetas = grid_search_thetas_2_1(thetasBuy, thetasMax, 'thBuy', 'thMax', CAR_TYPES)\n@patch\ndef grid_search_thetas_2_1(self:Policy, thetasA, thetasB, thetasA_name, thetasB_name, names):\n    thetas = [\n    self.build_theta({thetasA_name: {names[0]: thA0}, thetasB_name: {names[0]: thB0}})\n    for thA0 in thetasA[names[0]]\n      for thB0 in thetasB[names[0]]\n    ]\n    return thetas\n\n\n## EXAMPLE:\n## thetasA: Buy\n## thetasB: Max\n## thetasA_name: 'thBuy'\n## thetasB_name: 'thMax'\n## names: ELA, SON\n## 2_2: 2 theta sub-vectors, each having 2 thetas\n## thetas = grid_search_thetas_4(thetasBuy, thetasMax, 'thBuy', 'thMax', CAR_TYPES)\n@patch\ndef grid_search_thetas_2_2(self:Policy, thetasA, thetasB, thetasA_name, thetasB_name, names):\n    thetas = [\n    self.build_theta({thetasA_name: {names[0]: thA0, names[1]: thA1}, thetasB_name: {names[0]: thB0, names[1]: thB1}})\n    for thA0 in thetasA[names[0]]\n      for thA1 in thetasA[names[1]]\n        for thB0 in thetasB[names[0]]\n          for thB1 in thetasB[names[1]]\n    ]\n    return thetas\n\n\n# from AIShiftScheduler_KE5.model import *",
    "crumbs": [
      "policy"
    ]
  },
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "model",
    "section": "",
    "text": "# Set up autoreload\npd.__version__\n\n'2.0.3'\n# !pip freeze | grep pandas\n# !pip freeze|grep openpyxl\n# !pip freeze\n# !pip install -U ray==2.8.1\n# !pip install openpyxl\nclass MyClass(int): pass\n@patch\ndef func(self: MyClass, a): return self + a\nmc = MyClass(3)\nmc.func(10)\n\n13\nsource",
    "crumbs": [
      "model"
    ]
  },
  {
    "objectID": "model.html#usage",
    "href": "model.html#usage",
    "title": "model",
    "section": "Usage",
    "text": "Usage\n\n# hide\n# QUICK STEP\ndef print_S_t():\n  print(f'M.S_t[\"R_t\"]=\\n{M.S_t[\"R_t\"]}')\n  print(f'M.S_t[\"D_t\"]=\\n{M.S_t[\"D_t\"]}')\n\ndef print_x_t():\n  # print(f'x_t.x_t= {x_t.x_t}')\n  print(f'M.x_t[\"xAlloc_t\"]=\\n{M.x_t[\"xAlloc_t\"]}')\n\nrecord = []\nl = 1\nM = Model()\nP = pol.Policy(M)\n## DEM = DemandSimulator(seed=SEED_TRAIN); print(f'{DEM.simulate()=}')\n## MER = MeritSimulator(seed=SEED_TRAIN); print(f'{MER.simulate()=}')\n\ntheta_test = P.build_theta({\n  'thCumSlots': .1,\n  'thSickProb': .3,\n  'thCumMerits': .2,\n  'thContSlots': 1 - (.6),\n  'thSelect': 'random'\n})\nrecord_l = [cf.piNAMES[0], theta_test, l]; print(f'{record_l=}')\nprint_S_t()\nprint_x_t()\n\nrecord_l=['X__Alloc', Theta(thCumSlots=0.1, thSickProb=0.3, thCumMerits=0.2, thContSlots=0.4, thSelect='random'), 1]\nM.S_t[\"R_t\"]=\n   ResourceId         Type  RAvail_t  RCumSlots_t  RCumMerits_t  RComplete_t\n0        Matt      Manager         0            0             0            0\n1        Mike   AssistMngr         0            0             0            0\n2      Tanner   AssistMngr         0            0             0            0\n3        Jake  RetailAssoc         0            0             0            0\n4       James  RetailAssoc         0            0             0            0\n5        Jane  RetailAssoc         0            0             0            0\n6        John  RetailAssoc         0            0             0            0\n7         Jim  RetailAssoc         0            0             0            0\n8       Jenny  RetailAssoc         0            0             0            0\n9      Jeremy  RetailAssoc         0            0             0            0\n10       Judy  RetailAssoc         0            0             0            0\n11      Julie  RetailAssoc         0            0             0            0\n12    Jeffrey  RetailAssoc         0            0             0            0\nM.S_t[\"D_t\"]=\n          Type  DSlot_t  DBusy_t  DVolume_t  DRevenue_t  DMax_t\n0      Manager        1        0          0           0       0\n1   AssistMngr        1        0          0           0       0\n2  RetailAssoc        1        0          0           0       0\nM.x_t[\"xAlloc_t\"]=\n                                 Comb  Allocd_t\n0              Manager_Matt___Manager     False\n1        AssistMngr_Mike___AssistMngr     False\n2      AssistMngr_Tanner___AssistMngr     False\n3      RetailAssoc_Jake___RetailAssoc     False\n4     RetailAssoc_James___RetailAssoc     False\n5      RetailAssoc_Jane___RetailAssoc     False\n6      RetailAssoc_John___RetailAssoc     False\n7       RetailAssoc_Jim___RetailAssoc     False\n8     RetailAssoc_Jenny___RetailAssoc     False\n9    RetailAssoc_Jeremy___RetailAssoc     False\n10     RetailAssoc_Judy___RetailAssoc     False\n11    RetailAssoc_Julie___RetailAssoc     False\n12  RetailAssoc_Jeffrey___RetailAssoc     False\n\n\n\n## hide\n# T = 7*24\n# T = 2*24\nT = 2\n# T = 1*SLOTS_PER_DAY\n# T = 2*SLOTS_PER_DAY\ndt = pd.to_datetime(cf.START_DATE_TIME)\ndt_delta = pd.Timedelta(cf.DATE_TIME_DELTA)\nfor t in range(T):\n  print(f'\\n################# t={t}, dt={dt} #################')\n  # getattr(P, 'X__AllocBelow')(t, M.S_t, M.x_t, theta_test); #print(f'{x_t=}')\n  getattr(P, 'X__Alloc')(t, dt, M.S_t, M.x_t, theta_test); #print(f'{x_t=}')\n  print_S_t()\n  print_x_t()\n\n  # record_t = M.step(t, theta_test)\n  record_t = M.step(t, dt, theta_test)\n  print(f'\\nAFTER STEP:')\n  record.append(record_l + record_t); #print(f'{record=}')\n  dt = dt + dt_delta\n  # print_S_t()\n  # print(f'{M.Ccum=}')\n\n\n################# t=0, dt=2023-12-04 00:00:00 #################\nM.S_t[\"R_t\"]=\n   ResourceId         Type  RAvail_t  RCumSlots_t  RCumMerits_t  RComplete_t\n0        Matt      Manager         0            0             0            0\n1        Mike   AssistMngr         0            0             0            0\n2      Tanner   AssistMngr         0            0             0            0\n3        Jake  RetailAssoc         0            0             0            0\n4       James  RetailAssoc         0            0             0            0\n5        Jane  RetailAssoc         0            0             0            0\n6        John  RetailAssoc         0            0             0            0\n7         Jim  RetailAssoc         0            0             0            0\n8       Jenny  RetailAssoc         0            0             0            0\n9      Jeremy  RetailAssoc         0            0             0            0\n10       Judy  RetailAssoc         0            0             0            0\n11      Julie  RetailAssoc         0            0             0            0\n12    Jeffrey  RetailAssoc         0            0             0            0\nM.S_t[\"D_t\"]=\n          Type  DSlot_t  DBusy_t  DVolume_t  DRevenue_t  DMax_t\n0      Manager        1        0          0           0       0\n1   AssistMngr        1        0          0           0       0\n2  RetailAssoc        1        0          0           0       0\nM.x_t[\"xAlloc_t\"]=\n                                 Comb  Allocd_t\n0              Manager_Matt___Manager     False\n1        AssistMngr_Mike___AssistMngr     False\n2      AssistMngr_Tanner___AssistMngr     False\n3      RetailAssoc_Jake___RetailAssoc     False\n4     RetailAssoc_James___RetailAssoc     False\n5      RetailAssoc_Jane___RetailAssoc     False\n6      RetailAssoc_John___RetailAssoc     False\n7       RetailAssoc_Jim___RetailAssoc     False\n8     RetailAssoc_Jenny___RetailAssoc     False\n9    RetailAssoc_Jeremy___RetailAssoc     False\n10     RetailAssoc_Judy___RetailAssoc     False\n11    RetailAssoc_Julie___RetailAssoc     False\n12  RetailAssoc_Jeffrey___RetailAssoc     False\n\nAFTER STEP:\n\n################# t=1, dt=2023-12-04 01:00:00 #################\nM.S_t[\"R_t\"]=\n   ResourceId         Type  RAvail_t  RCumSlots_t  RCumMerits_t  RComplete_t\n0        Matt      Manager         0            0             0            0\n1        Mike   AssistMngr         0            0             1            0\n2      Tanner   AssistMngr         0            0             0            0\n3        Jake  RetailAssoc         0            0             0            0\n4       James  RetailAssoc         0            0             1            0\n5        Jane  RetailAssoc         0            0             0            0\n6        John  RetailAssoc         0            0             0            0\n7         Jim  RetailAssoc         0            0             0            0\n8       Jenny  RetailAssoc         0            0             0            0\n9      Jeremy  RetailAssoc         0            0             0            0\n10       Judy  RetailAssoc         0            0             0            0\n11      Julie  RetailAssoc         0            0             0            0\n12    Jeffrey  RetailAssoc         0            0             0            0\nM.S_t[\"D_t\"]=\n          Type  DSlot_t  DBusy_t  DVolume_t  DRevenue_t  DMax_t\n0      Manager        0        0          0           0       0\n1   AssistMngr        0        0          0           0       0\n2  RetailAssoc        0        0          0           0       0\nM.x_t[\"xAlloc_t\"]=\n                                 Comb  Allocd_t\n0              Manager_Matt___Manager     False\n1        AssistMngr_Mike___AssistMngr     False\n2      AssistMngr_Tanner___AssistMngr     False\n3      RetailAssoc_Jake___RetailAssoc     False\n4     RetailAssoc_James___RetailAssoc     False\n5      RetailAssoc_Jane___RetailAssoc     False\n6      RetailAssoc_John___RetailAssoc     False\n7       RetailAssoc_Jim___RetailAssoc     False\n8     RetailAssoc_Jenny___RetailAssoc     False\n9    RetailAssoc_Jeremy___RetailAssoc     False\n10     RetailAssoc_Judy___RetailAssoc     False\n11    RetailAssoc_Julie___RetailAssoc     False\n12  RetailAssoc_Jeffrey___RetailAssoc     False\n\nAFTER STEP:\n\n\n\n## hide\nV = vis.Visualization()\nLabels = V.setup_plot_labels()\n\n\ndf_test_n_t = pd.DataFrame.from_records(record, columns=Labels)\ndf_test_n_t.tail()\n\n\n\n\n\n\n\n\n\npiName\ntheta\nl\nt\ndt\nRAvail_t_Manager_Matt\nRAvail_t_AssistMngr_Mike\nRAvail_t_AssistMngr_Tanner\nRAvail_t_RetailAssoc_Jake\nRAvail_t_RetailAssoc_James\nRAvail_t_RetailAssoc_Jane\nRAvail_t_RetailAssoc_John\nRAvail_t_RetailAssoc_Jim\nRAvail_t_RetailAssoc_Jenny\nRAvail_t_RetailAssoc_Jeremy\nRAvail_t_RetailAssoc_Judy\nRAvail_t_RetailAssoc_Julie\nRAvail_t_RetailAssoc_Jeffrey\nRCumSlots_t_Manager_Matt\nRCumSlots_t_AssistMngr_Mike\nRCumSlots_t_AssistMngr_Tanner\nRCumSlots_t_RetailAssoc_Jake\nRCumSlots_t_RetailAssoc_James\nRCumSlots_t_RetailAssoc_Jane\nRCumSlots_t_RetailAssoc_John\nRCumSlots_t_RetailAssoc_Jim\nRCumSlots_t_RetailAssoc_Jenny\nRCumSlots_t_RetailAssoc_Jeremy\nRCumSlots_t_RetailAssoc_Judy\nRCumSlots_t_RetailAssoc_Julie\nRCumSlots_t_RetailAssoc_Jeffrey\nRCumMerits_t_Manager_Matt\nRCumMerits_t_AssistMngr_Mike\nRCumMerits_t_AssistMngr_Tanner\nRCumMerits_t_RetailAssoc_Jake\nRCumMerits_t_RetailAssoc_James\nRCumMerits_t_RetailAssoc_Jane\nRCumMerits_t_RetailAssoc_John\nRCumMerits_t_RetailAssoc_Jim\nRCumMerits_t_RetailAssoc_Jenny\nRCumMerits_t_RetailAssoc_Jeremy\nRCumMerits_t_RetailAssoc_Judy\nRCumMerits_t_RetailAssoc_Julie\nRCumMerits_t_RetailAssoc_Jeffrey\nRComplete_t_Manager_Matt\nRComplete_t_AssistMngr_Mike\nRComplete_t_AssistMngr_Tanner\nRComplete_t_RetailAssoc_Jake\nRComplete_t_RetailAssoc_James\nRComplete_t_RetailAssoc_Jane\nRComplete_t_RetailAssoc_John\nRComplete_t_RetailAssoc_Jim\nRComplete_t_RetailAssoc_Jenny\nRComplete_t_RetailAssoc_Jeremy\nRComplete_t_RetailAssoc_Judy\nRComplete_t_RetailAssoc_Julie\nRComplete_t_RetailAssoc_Jeffrey\nDSlot_t_Manager\nDSlot_t_AssistMngr\nDSlot_t_RetailAssoc\nDBusy_t_Manager\nDBusy_t_AssistMngr\nDBusy_t_RetailAssoc\nDVolume_t_Manager\nDVolume_t_AssistMngr\nDVolume_t_RetailAssoc\nDRevenue_t_Manager\nDRevenue_t_AssistMngr\nDRevenue_t_RetailAssoc\nDMax_t_Manager\nDMax_t_AssistMngr\nDMax_t_RetailAssoc\nB_t\nV_t\nN_t\nUcum_Manager\nUcum_AssistMngr\nUcum_RetailAssoc\nUcum_Total\nCcum_CumSlots\nCcum_SickProb\nCcum_CumMerits\nCcum_ContSlots\nCcum\nAllocd_t_Manager_Matt___Manager\nAllocd_t_AssistMngr_Mike___AssistMngr\nAllocd_t_AssistMngr_Tanner___AssistMngr\nAllocd_t_RetailAssoc_Jake___RetailAssoc\nAllocd_t_RetailAssoc_James___RetailAssoc\nAllocd_t_RetailAssoc_Jane___RetailAssoc\nAllocd_t_RetailAssoc_John___RetailAssoc\nAllocd_t_RetailAssoc_Jim___RetailAssoc\nAllocd_t_RetailAssoc_Jenny___RetailAssoc\nAllocd_t_RetailAssoc_Jeremy___RetailAssoc\nAllocd_t_RetailAssoc_Judy___RetailAssoc\nAllocd_t_RetailAssoc_Julie___RetailAssoc\nAllocd_t_RetailAssoc_Jeffrey___RetailAssoc\n\n\n\n\n0\nX__Alloc\n(0.1, 0.3, 0.2, 0.4, random)\n1\n0\n2023-12-04 00:00:00\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0\n0.0000\n0.0000\n0.0000\n0.0000\n0.0000\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n1\nX__Alloc\n(0.1, 0.3, 0.2, 0.4, random)\n1\n1\n2023-12-04 01:00:00\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n-1\n1\n0\n0\n0\n-1\n0\n0\n-1\n-1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0.0000\n0\n0\n0\n0\n0.0000\n0.0000\n0.0000\n0.0000\n0.0000\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\n\n\n\n\n\n\n\n## hide\nV.plot_records(\n  df=df_test_n_t,\n  df_non=None,\n  pars=defaultdict(str, {\n    # 'thetaAdj1': {a1n: theta_test.thAdj1[a1n] for a1n in a1NAMES},\n    # 'thetaAdj3': {a1n: theta_test.thAdj3[a1n] for a1n in a1NAMES},\n    # 'suptitle': f'TRAINING OF X__AdjBelow POLICY'+'\\n'+f'(first {first_n_t} records)'+'\\n'+ \\\n    # f'L = {L}, T = {T}, '+ \\\n    # r'$\\theta^*=$'+f'{P.round_theta(best_theta_AdjBelow)}',\n    'T': T\n  }),\n)\n\n/Users/kobus/AIShiftScheduler_KE5/AIShiftScheduler_KE5/visualization.py:429: UserWarning: Attempting to set identical low and high ylims makes transformation singular; automatically expanding.\n  axs[xi+i].set_ylim(0, ymax); axs[xi+i].spines['top'].set_visible(False); axs[xi+i].spines['right'].set_visible(True); axs[xi+i].spines['bottom'].set_visible(False)",
    "crumbs": [
      "model"
    ]
  },
  {
    "objectID": "-tut_00_core.html",
    "href": "-tut_00_core.html",
    "title": "core",
    "section": "",
    "text": "# # Set up autoreload\n# %load_ext autoreload\n# %autoreload 2\n\n\n!pwd\n\n/Users/kobus/AIShiftScheduler_KE4/AIShiftScheduler_KE4/nbs\n\n\n\n!which python\n\n/Users/kobus/AIShiftScheduler_KE4/venv_AIShiftScheduler_KE4/bin/python\n\n\n\n\nsay_hello\n\n say_hello (to)\n\nSay hello to somebody\n\nassert say_hello(\"Isaac\") == 'Hello Isaac!'\n\n\n\n\nfoo\n\n foo ()\n\n\nprint(3+3)\n\n6\n\n\n\ndisplay(SVG('&lt;svg height=\"100\" xmlns=\"http://www.w3.org/2000/svg\"&gt;&lt;circle cx=\"50\" cy=\"50\" r=\"40\"/&gt;&lt;/svg&gt;'))\n\n\n\n\n\n\n\n\n\n\n\nHelloSayer\n\n HelloSayer (to)\n\nSay hello to to using say_hello\n\n\n\nHelloSayer.say\n\n HelloSayer.say ()\n\nDo the saying\n\no = HelloSayer(\"Alexis\")\no.say()\n\n'Hello Alexis!'",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "visualization.html",
    "href": "visualization.html",
    "title": "visualization",
    "section": "",
    "text": "# Set up autoreload\npd.__version__\n\n'2.0.3'\n# !pip freeze | grep pandas\n# !pip freeze|grep openpyxl\n# !pip freeze\n# !pip install -U ray==2.8.1\n# !pip install openpyxl\nsource",
    "crumbs": [
      "visualization"
    ]
  },
  {
    "objectID": "visualization.html#usage",
    "href": "visualization.html#usage",
    "title": "visualization",
    "section": "Usage",
    "text": "Usage\n\n# ## hide\n# V = Visualization()\n# Labels = V.setup_plot_labels()\n\n\n# # hide\n# # QUICK STEP\n# def print_S_t():\n#   print(f'M.S_t[\"R_t\"]=\\n{M.S_t[\"R_t\"]}')\n#   print(f'M.S_t[\"D_t\"]=\\n{M.S_t[\"D_t\"]}')\n\n# def print_x_t():\n#   # print(f'x_t.x_t= {x_t.x_t}')\n#   print(f'M.x_t[\"xAlloc_t\"]=\\n{M.x_t[\"xAlloc_t\"]}')\n\n# record = []\n# l = 1\n# M = Model()\n# P = Policy(M)\n# ## DEM = DemandSimulator(seed=SEED_TRAIN); print(f'{DEM.simulate()=}')\n# ## MER = MeritSimulator(seed=SEED_TRAIN); print(f'{MER.simulate()=}')\n\n# theta_test = P.build_theta({\n#   'thCumSlots': .1,\n#   'thSickProb': .3,\n#   'thCumMerits': .2,\n#   'thContSlots': 1 - (.6),\n#   'thSelect': 'random'\n# })\n# record_l = [cf.piNAMES[0], theta_test, l]; print(f'{record_l=}')\n# print_S_t()\n# print_x_t()\n\n\n# ## hide\n# # T = 7*24\n# # T = 2*24\n# T = 2\n# # T = 1*SLOTS_PER_DAY\n# # T = 2*SLOTS_PER_DAY\n# dt = pd.to_datetime(cf.START_DATE_TIME)\n# dt_delta = pd.Timedelta(cf.DATE_TIME_DELTA)\n# for t in range(T):\n#   print(f'\\n################# t={t}, dt={dt} #################')\n#   # getattr(P, 'X__AllocBelow')(t, M.S_t, M.x_t, theta_test); #print(f'{x_t=}')\n#   getattr(P, 'X__Alloc')(t, dt, M.S_t, M.x_t, theta_test); #print(f'{x_t=}')\n#   print_S_t()\n#   print_x_t()\n\n#   # record_t = M.step(t, theta_test)\n#   record_t = M.step(t, dt, theta_test)\n#   print(f'\\nAFTER STEP:')\n#   record.append(record_l + record_t); #print(f'{record=}')\n#   dt = dt + dt_delta\n#   # print_S_t()\n#   # print(f'{M.Ccum=}')\n\n\n# ## hide\n# df_test_n_t = pd.DataFrame.from_records(record, columns=Labels)\n# df_test_n_t.tail()\n\n\n# ## hide\n# V.plot_records(\n#   df=df_test_n_t,\n#   df_non=None,\n#   pars=defaultdict(str, {\n#     'T': T\n#     # 'thetaAdj1': {a1n: theta_test.thAdj1[a1n] for a1n in a1NAMES},\n#     # 'thetaAdj3': {a1n: theta_test.thAdj3[a1n] for a1n in a1NAMES},\n#     # 'suptitle': f'TRAINING OF X__AdjBelow POLICY'+'\\n'+f'(first {first_n_t} records)'+'\\n'+ \\\n#     # f'L = {L}, T = {T}, '+ \\\n#     # r'$\\theta^*=$'+f'{P.round_theta(best_theta_AdjBelow)}',\n#   }),\n# )",
    "crumbs": [
      "visualization"
    ]
  },
  {
    "objectID": "trainer.html",
    "href": "trainer.html",
    "title": "trainer",
    "section": "",
    "text": "# Set up autoreload\n\nThe autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\npd.__version__\n\n'2.0.3'\n\n\n\n# !pip freeze | grep pandas\n# !pip freeze|grep openpyxl\n# !pip freeze\n\n\n# !pip install -U ray==2.8.1\n# !pip install openpyxl\n\n\n# #| export\n# base_dir = '.'\n# file_name = 'shift_scheduler_data.xlsx'\n\n\nsource\n\ndo_train\n\n do_train (L, T, Thetas)",
    "crumbs": [
      "trainer"
    ]
  },
  {
    "objectID": "loader.html",
    "href": "loader.html",
    "title": "loader",
    "section": "",
    "text": "# Set up autoreload\n\n\npd.__version__\n\n'2.0.3'\n\n\n\n# !pip freeze | grep pandas\n# !pip freeze|grep openpyxl\n# !pip freeze\n\n\n# !pip install -U ray==2.8.1\n# !pip install openpyxl\n\n\n#/// #| export\n# base_dir = '.'\n# file_name = 'shift_scheduler_data.xlsx'\n\n\nsource\n\nload_sick_probs\n\n load_sick_probs (filename)\n\n\nsource\n\n\nload_merit_probs\n\n load_merit_probs (filename)\n\n\nsource\n\n\nload_exog_info\n\n load_exog_info (filename)",
    "crumbs": [
      "loader"
    ]
  }
]